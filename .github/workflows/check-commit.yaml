
name: Check Commit

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit SHA from target repo'
        required: false
        type: string
      target_repo_owner:
        description: 'Target repository owner (e.g., username or org)'
        required: true
        type: string
      target_repo_name:
        description: 'Target repository name'
        required: true
        type: string
      target_repo_token:
        description: 'Personal access token for target repository (if private)'
        required: false
        type: string

jobs:
  close-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Check commit messages for issue references
        id: commit-check
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // 获取输入参数
              const commitSha = '${{ github.event.inputs.commit_sha }}' || process.env.GITHUB_SHA;
              const targetRepoOwner = '${{ github.event.inputs.target_repo_owner }}';
              const targetRepoName = '${{ github.event.inputs.target_repo_name }}';
              const targetRepoToken = '${{ github.event.inputs.target_repo_token }}';
              
              // 当前仓库信息（用于关闭issue）
              const currentRepoOwner = context.repo.owner;
              const currentRepoName = context.repo.repo;
              
              console.log(`Checking commits in ${targetRepoOwner}/${targetRepoName} for SHA: ${commitSha}`);
              console.log(`Will close issues in ${currentRepoOwner}/${currentRepoName}`);
              
              // 创建用于访问目标仓库的API客户端
              const targetGithub = targetRepoToken 
                ? new github.GitHub(targetRepoToken)
                : github;
              
              const commits = await targetGithub.rest.repos.listCommits({
                owner: targetRepoOwner,
                repo: targetRepoName,
                ref: commitSha
              });
              
              console.log(`Found ${commits.data.length} commits to check`);
              
              for (const commit of commits.data) {
                const match = commit.commit.message.match(/#(\d+)/);
                if (match) {
                  console.log(`Found issue reference in commit: ${match[0]}`);
                  const issueNumber = parseInt(match[1]);
                  console.log(`Issue number: ${issueNumber}`);
                  
                  try {
                    // 检查当前仓库中的issue是否存在
                    const issue = await github.rest.issues.get({
                      owner: currentRepoOwner,
                      repo: currentRepoName,
                      issue_number: issueNumber
                    });
                    
                    if (issue.data.state !== 'closed') {
                      await github.rest.issues.update({
                        owner: currentRepoOwner,
                        repo: currentRepoName,
                        issue_number: issueNumber,
                        state: "closed"
                      });
                      console.log(`Issue ${issueNumber} closed in ${currentRepoOwner}/${currentRepoName}`);
                    } else {
                      console.log(`Issue ${issueNumber} is already closed in ${currentRepoOwner}/${currentRepoName}`);
                    }
                  } catch (error) {
                    console.log(`Error processing issue ${issueNumber}: ${error.message}`);
                    // 如果issue不存在，记录但不失败
                    if (error.status === 404) {
                      console.log(`Issue ${issueNumber} not found in ${currentRepoOwner}/${currentRepoName}`);
                    }
                  }
                }
              }
            } catch (error) {
              console.error(`Error in workflow: ${error.message}`);
              core.setFailed(`Workflow failed: ${error.message}`);
            }